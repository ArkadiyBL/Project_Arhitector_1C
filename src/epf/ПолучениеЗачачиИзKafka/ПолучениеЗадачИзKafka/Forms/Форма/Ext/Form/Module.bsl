
&НаСервереБезКонтекста
Процедура ПолучитьСообщенияНаСервере(СтруктураПараметровКафка, Ошибки)
	ОбработкаПолучения = Обработки.РаботаСKafkaЧерезВК.Создать();
	Результат = Инициализация_Чтение(ОбработкаПолучения, СтруктураПараметровКафка);
	
	Если ТипЗнч(Результат) = Тип("Структура") И Не Результат.булУспешно Тогда
		Ошибки = Результат.стрОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	чслЧтение = Число(XMLСтрока(1000));
	чслТаймаут = Число(XMLСтрока(3000));
	ЧитатьДД = ?(Ложь, Истина, Ложь);
	
	сткРезультат = ОбработкаПолучения.Получатель_ЭкранироватьЗначениеСообщения(Истина);
	Если Не сткРезультат.булУспешно Тогда
		Ошибки = (сткРезультат.стрОписаниеОшибки);
		Возврат;
	КонецЕсли;	
	
	сткРезультат = ОбработкаПолучения.Получатель_ЭкранироватьКлючСообщения(Истина);
	Если Не сткРезультат.булУспешно Тогда
		Ошибки = (сткРезультат.стрОписаниеОшибки);
		Возврат;	
	КонецЕсли;	
	
	сткРезультат = ОбработкаПолучения.Получатель_ЭкранироватьКлючиЗаголовков(Истина);
	Если Не сткРезультат.булУспешно Тогда
		Ошибки = (сткРезультат.стрОписаниеОшибки);
		Возврат;	
	КонецЕсли;	
	
	сткРезультат = ОбработкаПолучения.Получатель_ЭкранироватьЗначенияЗаголовков(Истина);
	Если Не сткРезультат.булУспешно Тогда
		Ошибки = (сткРезультат.стрОписаниеОшибки);
		Возврат;	
	КонецЕсли;	

	
	чНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	сткРезультат = ОбработкаПолучения.Получатель_ПрочитатьСписокСообщенийВПул(чслЧтение, чслТаймаут, ?(0 = 1, 10, 1));
	Если Не сткРезультат.булУспешно Тогда
		Ошибки = (сткРезультат.стрОписаниеОшибки);
		Возврат;	
	КонецЕсли;	
	
	сткРезультат = ОбработкаПолучения.Получатель_ПолучитьСообщенияИзПулаJSON(ЧитатьДД);
	Если Не сткРезультат.булУспешно Тогда
		Ошибки = (сткРезультат.стрОписаниеОшибки);
		Возврат;
	КонецЕсли;	
		
	чОкончание = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Ошибки = ("Затрачено на получение: " + Строка(чОкончание - чНачало));

	сткРезультат = ОбработкаПолучения.JSONВСтруктуру(сткРезультат.стрСообщения);
	Если Не сткРезультат.булУспешно Тогда
		Ошибки = (сткРезультат.стрОписаниеОшибки);	
		Возврат;
	КонецЕсли;	
	
	Если сткРезультат.масДанные.Количество() > 0 Тогда		
		сткРезультатФиксации = ОбработкаПолучения.Получатель_ЗафиксироватьСмещения();
		Если Не сткРезультатФиксации.булУспешно Тогда
			Ошибки = (сткРезультатФиксации.стрОписаниеОшибки);	
			Возврат;
		КонецЕсли;	
	КонецЕсли;
			
	тзДанные_Чтение = Новый ТаблицаЗначений;
	тзДанные_Чтение.Колонки.Добавить("key");
	тзДанные_Чтение.Колонки.Добавить("value");
	тзДанные_Чтение.Колонки.Добавить("topic");
	тзДанные_Чтение.Колонки.Добавить("partition");
	тзДанные_Чтение.Колонки.Добавить("offset");
	тзДанные_Чтение.Колонки.Добавить("timestamp");
	тзДанные_Чтение.Колонки.Добавить("headers");
	тзДанные = ОбработкаПолучения.Получатель_ПолучитьТаблицуСообщения();
	Для Каждого Элемент Из сткРезультат.масДанные Цикл
		
		стрДобавить = тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(стрДобавить, Элемент);	
		стрДобавить.headers = ОбработкаПолучения.Получатель_ПолучитьТаблицуЗаголовки();
		
		Для Каждого СтрокаЗаголовок Из Элемент.Headers Цикл
			ЗаполнитьЗначенияСвойств(стрДобавить.headers.Добавить(), СтрокаЗаголовок);
		КонецЦикла;
	КонецЦикла;
	
	тзДанные_Чтение = тзДанные; 
	Ответ = "";
	Для Каждого СтрокаКафка Из тзДанные_Чтение Цикл 
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаКафка.value);
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина); 
		ПараметрыЗадачи = Новый Соответствие;
		ПараметрыЗадачи.Вставить("Отправитель", "Бадальян Аркадий Людвигович");
		ПараметрыЗадачи.Вставить("Получатель", "Бадальян Аркадий Людвигович");
		ПараметрыЗадачи.Вставить("Комментарий", ДанныеJSON.Получить("#value").Получить("Комментарий"));
		ПараметрыЗадачи.Вставить("Задача", ДанныеJSON.Получить("#value").Получить("ТипЗаяления") + 
											" " + ДанныеJSON.Получить("#value").Получить("Статус") + 
											" " + ДанныеJSON.Получить("#value").Получить("Number"));
		ПараметрыЗадачи.Вставить("Данные", Новый Массив);
		//ПараметрыЗадачи.Вставить("", "");
		СтруктураОтвета = IS_ОбщийМодуль_Доработки.СоздатьЗадачу(ПараметрыЗадачи);
		Для Каждого Эл Из СтруктураОтвета Цикл
			Ответ = Ответ + Эл.Ключ + ": " + Эл.Значение + Символы.ПС;
		КонецЦикла;
	КонецЦикла;	
	Ошибки = Ответ;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСообщения(Команда)
	СтруктураПараметровКафка = Новый Структура;
	СтруктураПараметровКафка.Вставить("АдресКафка", АдресКафка);
	СтруктураПараметровКафка.Вставить("ТопикКафка", ТопикКафка); 
	Ошибки = ""; 
	
	ПолучитьСообщенияНаСервере(СтруктураПараметровКафка, Ошибки);
	Сообщить(Ошибки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция Инициализация_Чтение(ОбработкаПолучения, СтруктураПараметровКафка)
		
	ОбработкаПолучения.Получатель_Закрыть();
	
	сткРезультат = ОбработкаПолучения.СоздатьПолучателя();
	Если Не сткРезультат.булУспешно Тогда
		Возврат(сткРезультат.стрОписаниеОшибки);	
		//Возврат;
	КонецЕсли;
	
	//Получатель   
	Чтение_НастройкиГлобальные = Новый ТаблицаЗначений; 
	Чтение_НастройкиГлобальные.Колонки.Добавить("Key");
	Чтение_НастройкиГлобальные.Колонки.Добавить("Value");
	
	стрНастройка = Чтение_НастройкиГлобальные.Добавить();
	стрНастройка.Key =  "message.max.bytes";
	стрНастройка.Value = "10000"; 
		
	стрНастройка = Чтение_НастройкиГлобальные.Добавить();
	стрНастройка.Key =  "socket.timeout.ms";
	стрНастройка.Value = "30000"; 	
	
	стрНастройка = Чтение_НастройкиГлобальные.Добавить();
	стрНастройка.Key =  "enable.auto.commit";
	стрНастройка.Value = "false"; 
	
	стрНастройка = Чтение_НастройкиГлобальные.Добавить();
	стрНастройка.Key =  "auto.commit.interval.ms";
	стрНастройка.Value = "0";   
	
	Для Каждого Строка Из Чтение_НастройкиГлобальные Цикл
		сткРезультат = ОбработкаПолучения.Получатель_УстановитьПараметрГлобальный(Строка.Key, Строка.Value);
		Если Не сткРезультат.булУспешно Тогда
			Возврат(сткРезультат.стрОписаниеОшибки);	
			//Возврат;
		КонецЕсли;
	КонецЦикла;
	             
	
	//Получатель
	Чтение_НастройкиТопика = Новый ТаблицаЗначений;
	Чтение_НастройкиТопика.Колонки.Добавить("Key");
	Чтение_НастройкиТопика.Колонки.Добавить("Value"); 
	
	стрНастройка = Чтение_НастройкиТопика.Добавить();
	стрНастройка.Key =  "compression.codec";
	стрНастройка.Value = "lz4"; 
	
	стрНастройка = Чтение_НастройкиТопика.Добавить();
	стрНастройка.Key =  "auto.offset.reset";
	стрНастройка.Value = "smallest";
	Для Каждого Строка Из Чтение_НастройкиТопика Цикл
		сткРезультат = ОбработкаПолучения.Получатель_УстановитьПараметрТопика(Строка.Key, Строка.Value);
		Если НЕ сткРезультат.булУспешно Тогда
			Возврат(сткРезультат.стрОписаниеОшибки);	
			//Возврат;
		КонецЕсли;
	КонецЦикла;
		
	сткРезультат = ОбработкаПолучения.Получатель_Инициализировать(СтруктураПараметровКафка.АдресКафка, "DO_test");
	Если Не сткРезультат.булУспешно Тогда
		Возврат(сткРезультат.стрОписаниеОшибки);	
		//Возврат;
	КонецЕсли;
	
	ПодпискаТопики_Чтение = 2;
	Если ПодпискаТопики_Чтение = 1 Тогда
		мТопики = Новый Массив();
		тзТопики_Чтение = Новый ТаблицаЗначений;
		тзТопики_Чтение.Колонки.Добавить("Topic");
		СтрокаТзТопик = тзТопики_Чтение.Добавить();
		СтрокаТзТопик.Topic = СтруктураПараметровКафка.ТопикКафка;
		Для Каждого стрТопик Из тзТопики_Чтение Цикл
			Если Не мТопики.Найти(стрТопик.Topic) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			мТопики.Добавить(СтруктураПараметровКафка.ТопикКафка);			
		КонецЦикла;
		
		сткРезультат = ОбработкаПолучения.Получатель_Подписаться(мТопики);
		Если Не сткРезультат.булУспешно Тогда
			Возврат(сткРезультат.стрОписаниеОшибки);	
			//Возврат;
		КонецЕсли;
	Иначе
		сткРезультат = ОбработкаПолучения.Получатель_ОчиститьСписокНазначений();
		Если Не сткРезультат.булУспешно Тогда
			Возврат(сткРезультат.стрОписаниеОшибки);	
			//Возврат;
		КонецЕсли;
		тзТопикиРазделы_Чтение = Новый ТаблицаЗначений;
		тзТопикиРазделы_Чтение.Колонки.Добавить("Topic");
		тзТопикиРазделы_Чтение.Колонки.Добавить("Partition");
		тзТопикиРазделы_Чтение.Колонки.Добавить("Offset");
		СтрокаТзТопик = тзТопикиРазделы_Чтение.Добавить();
		СтрокаТзТопик.Topic = СтруктураПараметровКафка.ТопикКафка;
		СтрокаТзТопик.Partition = 0;
		СтрокаТзТопик.Offset = -1;

		Для Каждого стрТопик Из тзТопикиРазделы_Чтение Цикл			
			сткРезультат = ОбработкаПолучения.Получатель_ДобавитьНазначение(стрТопик.Topic, стрТопик.Partition, ?(стрТопик.Offset = -1, Неопределено, стрТопик.Offset));
			Если Не сткРезультат.булУспешно Тогда
				Возврат(сткРезультат.стрОписаниеОшибки);	
				//Возврат;
			КонецЕсли;
		КонецЦикла;
		
		сткРезультат = ОбработкаПолучения.Получатель_Назначить();
		Если Не сткРезультат.булУспешно Тогда
			Возврат(сткРезультат.стрОписаниеОшибки);	
			//Возврат;
		КонецЕсли;		
	КонецЕсли;	
КонецФункции