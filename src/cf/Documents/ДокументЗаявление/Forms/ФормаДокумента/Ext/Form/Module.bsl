
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		Объект.Статус = Перечисления.СтатусДокумента.НеСогласован;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                               
	Если Не ПроверитьСтатусДокумента(Объект.Статус, "Согласован") Тогда
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаОтправитьВДО.Доступность = Ложь;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтправитьВДО(Команда)
	Если Модифицированность Тогда
		Ответ = Ждать ВопросАсинх("Требуется записать документ перед отправкой!!!", РежимДиалогаВопрос.ДаНет);
	КонецЕсли; 
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект.Записать();
	КонецЕсли;
 
	Ошибки =  "";
	ОтправитьВДОСервер(Объект, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Сообщить(Ошибки);    
	КонецЕсли;
КонецПроцедуры  

&НаСервереБезКонтекста
Процедура ОтправитьВДОСервер(Знач Объект, Ошибки)
	ОбработкаОтправки = Обработки.РаботаСKafkaЧерезВК.Создать();
	Результат = Инициализация_Запись(ОбработкаОтправки);
 
	Если ТипЗнч(Результат) = Тип("Структура") И Не Результат.булУспешно Тогда
		Ошибки = Результат.стрОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	мДанныеНаЗапись = Новый Массив();
	мЗаголовки = Новый Массив();
	мЗаголовки.Добавить(Новый Структура("data", "Document_Zayvka"));
	//мЗаголовки.Добавить(Новый Структура("Заголовок2", "Значение" + чСчетчик + 1));
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Объект.Ссылка.ПолучитьОбъект()); 
	
	стрСообщение = ЗаписьJSON.Закрыть();;
	мДанныеНаЗапись.Добавить(Новый Структура("Key, Value, Headers", XMLСтрока(Объект.Ссылка), стрСообщение, мЗаголовки));
	
	сткРезультатПреобразования = ОбработкаОтправки.СтруктуруВJSON(мДанныеНаЗапись);   
	стрДанные = "";
	стрДанные = стрДанные + сткРезультатПреобразования.стрДанные;
	сткРезультат = ОбработкаОтправки.Отправитель_ЗагрузитьСообщенияИзJSONВСписокНаОтправку(стрДанные); 
	Если Не сткРезультат.булУспешно Тогда
		Ошибки = сткРезультат.стрОписаниеОшибки;	
		Возврат;
	КонецЕсли;
	
	сткРезультат = ОбработкаОтправки.Отправитель_ДекодироватьКлючСообщенияКакBase64Строку();
	Если Не сткРезультат.булУспешно Тогда Ошибки = (сткРезультат.стрОписаниеОшибки);	Возврат; КонецЕсли;
	сткРезультат = ОбработкаОтправки.Отправитель_ДекодироватьТелоСообщенияКакBase64Строку();
	Если Не сткРезультат.булУспешно Тогда Ошибки = (сткРезультат.стрОписаниеОшибки);	Возврат; КонецЕсли;
	сткРезультат = ОбработкаОтправки.Отправитель_ДекодироватьЗначенияЗаголовковКакBase64Строку();
	Если Не сткРезультат.булУспешно Тогда Ошибки = (сткРезультат.стрОписаниеОшибки);	Возврат; КонецЕсли;
			
	сткРезультат = ОбработкаОтправки.Отправитель_Отправить();
	Если Не сткРезультат.булУспешно Тогда
		Ошибки = (сткРезультат.стрОписаниеОшибки);	
		Возврат;
	КонецЕсли;

	сткРезультат = ОбработкаОтправки.Отправитель_ВсеСообщенияДоставлены();
	Если Не сткРезультат.булУспешно Тогда
		Ошибки = (сткРезультат.стрОписаниеОшибки);	
		Возврат;
	КонецЕсли;
	
	Ошибки = ("Все сообщения доставлены: " + Строка(сткРезультат.булВсеСообщенияДоставлены));
	сткРезультат = ОбработкаОтправки.Отправитель_ПолучитьJSONОтчетОДоставке();
	Если Не сткРезультат.булУспешно Тогда
		Ошибки = (сткРезультат.стрОписаниеОшибки);	
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция Инициализация_Запись(ОбработкаОтправки)
	
	ОбработкаОтправки.Отправитель_Закрыть();
	
	сткРезультат = ОбработкаОтправки.СоздатьОтправителя();
	Если Не сткРезультат.булУспешно Тогда
		Возврат(сткРезультат.стрОписаниеОшибки);	
		//Возврат;
	КонецЕсли;

	//Для Каждого Строка Из Запись_НастройкиГлобальные Цикл
	//	сткРезультат = ОбработкаОтправки.Отправитель_УстановитьПараметрГлобальный(Строка.Key, Строка.Value);
	//	Если Не сткРезультат.булУспешно Тогда
	//		Возврат(сткРезультат.стрОписаниеОшибки);	
	//		//Возврат;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Для Каждого Строка Из Запись_НастройкиТопика Цикл
	//	сткРезультат = ОбработкаОтправки.Отправитель_УстановитьПараметрТопика(Строка.Key, Строка.Value);
	//	Если НЕ сткРезультат.булУспешно Тогда
	//		Возврат(сткРезультат.стрОписаниеОшибки);	
	//		//Возврат;
	//	КонецЕсли;
	//КонецЦикла;
	
	Адрес_Запись = "192.168.250.155:29092";
	Топик_Запись = "DO_test_Write";
	Раздел_Запись = -1;
	сткРезультат = ОбработкаОтправки.Отправитель_Инициализировать(Адрес_Запись, Топик_Запись, Раздел_Запись);
	Если Не сткРезультат.булУспешно Тогда
		Возврат(сткРезультат.стрОписаниеОшибки);	
		//Возврат;
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	Если ПроверитьСтатусДокумента(Объект.Статус, "Согласован") Тогда
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаОтправитьВДО.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры   

&НаСервере
Функция ПроверитьСтатусДокумента(Статус, СтатусПроверки)
	Если Статус = Перечисления.СтатусДокумента[СтатусПроверки] Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Асинх Процедура Добавить(Команда)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	//Фильтр = НСтр("ru = 'Текст'; en = 'Text'")
	//    + "(*.txt)|*.txt";
	//ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	МассивФайлов = Ждать ДиалогОткрытияФайла.ВыбратьАсинх();
	
	//Если ДиалогОткрытияФайла.Выбрать() Тогда
	//    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
			//ВыбФайл = Новый Файл(ИмяФайла);
			СтрокаФайла = Объект.Файлы.Добавить();
			СтрокаФайла.Наименование = ИмяФайла;
			////Сообщить(ИмяФайла
			////    + НСтр("ru = '; Размер = '; en = '; Size = '")
			////    + ВыбФайл.Размер());
			//СтрокаФайла.
	    КонецЦикла;
	//Иначе
	//    Предупреждение(НСтр("ru = 'Файл(ы) не выбран!'; en = 'File(s) not selected!'"));
	//КонецЕсли;
КонецПроцедуры
